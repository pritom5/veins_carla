// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_carla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_carla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_carla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_carla_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carla_2eproto;
namespace carla {
class ActorIds;
struct ActorIdsDefaultTypeInternal;
extern ActorIdsDefaultTypeInternal _ActorIds_default_instance_;
class Number;
struct NumberDefaultTypeInternal;
extern NumberDefaultTypeInternal _Number_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
class Vehicle;
struct VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
}  // namespace carla
PROTOBUF_NAMESPACE_OPEN
template<> ::carla::ActorIds* Arena::CreateMaybeMessage<::carla::ActorIds>(Arena*);
template<> ::carla::Number* Arena::CreateMaybeMessage<::carla::Number>(Arena*);
template<> ::carla::Rotation* Arena::CreateMaybeMessage<::carla::Rotation>(Arena*);
template<> ::carla::Transform* Arena::CreateMaybeMessage<::carla::Transform>(Arena*);
template<> ::carla::Vector* Arena::CreateMaybeMessage<::carla::Vector>(Arena*);
template<> ::carla::Vehicle* Arena::CreateMaybeMessage<::carla::Vehicle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace carla {

// ===================================================================

class ActorIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.ActorIds) */ {
public:
    inline ActorIds()
        : ActorIds(nullptr) {}
    ~ActorIds() override;
    explicit constexpr ActorIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ActorIds(const ActorIds& from);
    ActorIds(ActorIds&& from) noexcept
        : ActorIds()
    {
        *this = ::std::move(from);
    }

    inline ActorIds& operator=(const ActorIds& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ActorIds& operator=(ActorIds&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ActorIds& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ActorIds* internal_default_instance()
    {
        return reinterpret_cast<const ActorIds*>(
            &_ActorIds_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        0;

    friend void swap(ActorIds& a, ActorIds& b)
    {
        a.Swap(&b);
    }
    inline void Swap(ActorIds* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ActorIds* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ActorIds* New() const final
    {
        return new ActorIds();
    }

    ActorIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ActorIds>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ActorIds& from);
    void MergeFrom(const ActorIds& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ActorIds* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.ActorIds";
    }
protected:
    explicit ActorIds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActorIdFieldNumber = 1,
    };
    // repeated int32 actorId = 1;
    int actorid_size() const;
private:
    int _internal_actorid_size() const;
public:
    void clear_actorid();
private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actorid(int index) const;
    const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>&
    _internal_actorid() const;
    void _internal_add_actorid(::PROTOBUF_NAMESPACE_ID::int32 value);
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>*
    _internal_mutable_actorid();
public:
    ::PROTOBUF_NAMESPACE_ID::int32 actorid(int index) const;
    void set_actorid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
    void add_actorid(::PROTOBUF_NAMESPACE_ID::int32 value);
    const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>&
    actorid() const;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>*
    mutable_actorid();

    // @@protoc_insertion_point(class_scope:carla.ActorIds)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32> actorid_;
    mutable std::atomic<int> _actorid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class Number final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.Number) */ {
public:
    inline Number()
        : Number(nullptr) {}
    ~Number() override;
    explicit constexpr Number(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Number(const Number& from);
    Number(Number&& from) noexcept
        : Number()
    {
        *this = ::std::move(from);
    }

    inline Number& operator=(const Number& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Number& operator=(Number&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Number& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Number* internal_default_instance()
    {
        return reinterpret_cast<const Number*>(
            &_Number_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        1;

    friend void swap(Number& a, Number& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Number* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Number* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Number* New() const final
    {
        return new Number();
    }

    Number* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Number>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Number& from);
    void MergeFrom(const Number& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Number* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.Number";
    }
protected:
    explicit Number(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kNumFieldNumber = 1,
    };
    // int32 num = 1;
    void clear_num();
    ::PROTOBUF_NAMESPACE_ID::int32 num() const;
    void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
    void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
public:

    // @@protoc_insertion_point(class_scope:carla.Number)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class Vehicle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.Vehicle) */ {
public:
    inline Vehicle()
        : Vehicle(nullptr) {}
    ~Vehicle() override;
    explicit constexpr Vehicle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Vehicle(const Vehicle& from);
    Vehicle(Vehicle&& from) noexcept
        : Vehicle()
    {
        *this = ::std::move(from);
    }

    inline Vehicle& operator=(const Vehicle& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Vehicle& operator=(Vehicle&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Vehicle& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Vehicle* internal_default_instance()
    {
        return reinterpret_cast<const Vehicle*>(
            &_Vehicle_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        2;

    friend void swap(Vehicle& a, Vehicle& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Vehicle* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Vehicle* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Vehicle* New() const final
    {
        return new Vehicle();
    }

    Vehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Vehicle>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Vehicle& from);
    void MergeFrom(const Vehicle& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Vehicle* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.Vehicle";
    }
protected:
    explicit Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kSpeedFieldNumber = 2,
        kAccelerationFieldNumber = 3,
        kLocationFieldNumber = 4,
        kIdFieldNumber = 1,
    };
    // .carla.Vector speed = 2;
    bool has_speed() const;
private:
    bool _internal_has_speed() const;
public:
    void clear_speed();
    const ::carla::Vector& speed() const;
    PROTOBUF_FUTURE_MUST_USE_RESULT ::carla::Vector* release_speed();
    ::carla::Vector* mutable_speed();
    void set_allocated_speed(::carla::Vector* speed);
private:
    const ::carla::Vector& _internal_speed() const;
    ::carla::Vector* _internal_mutable_speed();
public:
    void unsafe_arena_set_allocated_speed(
        ::carla::Vector* speed);
    ::carla::Vector* unsafe_arena_release_speed();

    // .carla.Vector acceleration = 3;
    bool has_acceleration() const;
private:
    bool _internal_has_acceleration() const;
public:
    void clear_acceleration();
    const ::carla::Vector& acceleration() const;
    PROTOBUF_FUTURE_MUST_USE_RESULT ::carla::Vector* release_acceleration();
    ::carla::Vector* mutable_acceleration();
    void set_allocated_acceleration(::carla::Vector* acceleration);
private:
    const ::carla::Vector& _internal_acceleration() const;
    ::carla::Vector* _internal_mutable_acceleration();
public:
    void unsafe_arena_set_allocated_acceleration(
        ::carla::Vector* acceleration);
    ::carla::Vector* unsafe_arena_release_acceleration();

    // .carla.Vector location = 4;
    bool has_location() const;
private:
    bool _internal_has_location() const;
public:
    void clear_location();
    const ::carla::Vector& location() const;
    PROTOBUF_FUTURE_MUST_USE_RESULT ::carla::Vector* release_location();
    ::carla::Vector* mutable_location();
    void set_allocated_location(::carla::Vector* location);
private:
    const ::carla::Vector& _internal_location() const;
    ::carla::Vector* _internal_mutable_location();
public:
    void unsafe_arena_set_allocated_location(
        ::carla::Vector* location);
    ::carla::Vector* unsafe_arena_release_location();

    // int32 id = 1;
    void clear_id();
    ::PROTOBUF_NAMESPACE_ID::int32 id() const;
    void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
    void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
public:

    // @@protoc_insertion_point(class_scope:carla.Vehicle)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::carla::Vector* speed_;
    ::carla::Vector* acceleration_;
    ::carla::Vector* location_;
    ::PROTOBUF_NAMESPACE_ID::int32 id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.Vector) */ {
public:
    inline Vector()
        : Vector(nullptr) {}
    ~Vector() override;
    explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Vector(const Vector& from);
    Vector(Vector&& from) noexcept
        : Vector()
    {
        *this = ::std::move(from);
    }

    inline Vector& operator=(const Vector& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Vector& operator=(Vector&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Vector& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Vector* internal_default_instance()
    {
        return reinterpret_cast<const Vector*>(
            &_Vector_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        3;

    friend void swap(Vector& a, Vector& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Vector* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Vector* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Vector* New() const final
    {
        return new Vector();
    }

    Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Vector>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Vector& from);
    void MergeFrom(const Vector& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Vector* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.Vector";
    }
protected:
    explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kXFieldNumber = 1,
        kYFieldNumber = 2,
        kZFieldNumber = 3,
    };
    // double x = 1;
    void clear_x();
    double x() const;
    void set_x(double value);
private:
    double _internal_x() const;
    void _internal_set_x(double value);
public:

    // double y = 2;
    void clear_y();
    double y() const;
    void set_y(double value);
private:
    double _internal_y() const;
    void _internal_set_y(double value);
public:

    // double z = 3;
    void clear_z();
    double z() const;
    void set_z(double value);
private:
    double _internal_z() const;
    void _internal_set_z(double value);
public:

    // @@protoc_insertion_point(class_scope:carla.Vector)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.Rotation) */ {
public:
    inline Rotation()
        : Rotation(nullptr) {}
    ~Rotation() override;
    explicit constexpr Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Rotation(const Rotation& from);
    Rotation(Rotation&& from) noexcept
        : Rotation()
    {
        *this = ::std::move(from);
    }

    inline Rotation& operator=(const Rotation& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Rotation& operator=(Rotation&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Rotation& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Rotation* internal_default_instance()
    {
        return reinterpret_cast<const Rotation*>(
            &_Rotation_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        4;

    friend void swap(Rotation& a, Rotation& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Rotation* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Rotation* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Rotation* New() const final
    {
        return new Rotation();
    }

    Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Rotation>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Rotation& from);
    void MergeFrom(const Rotation& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Rotation* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.Rotation";
    }
protected:
    explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kPitchFieldNumber = 1,
        kYawFieldNumber = 2,
        kRollFieldNumber = 3,
    };
    // double pitch = 1;
    void clear_pitch();
    double pitch() const;
    void set_pitch(double value);
private:
    double _internal_pitch() const;
    void _internal_set_pitch(double value);
public:

    // double yaw = 2;
    void clear_yaw();
    double yaw() const;
    void set_yaw(double value);
private:
    double _internal_yaw() const;
    void _internal_set_yaw(double value);
public:

    // double roll = 3;
    void clear_roll();
    double roll() const;
    void set_roll(double value);
private:
    double _internal_roll() const;
    void _internal_set_roll(double value);
public:

    // @@protoc_insertion_point(class_scope:carla.Rotation)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    double pitch_;
    double yaw_;
    double roll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carla.Transform) */ {
public:
    inline Transform()
        : Transform(nullptr) {}
    ~Transform() override;
    explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Transform(const Transform& from);
    Transform(Transform&& from) noexcept
        : Transform()
    {
        *this = ::std::move(from);
    }

    inline Transform& operator=(const Transform& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Transform& operator=(Transform&& from) noexcept
    {
        if (this == &from) return *this;
        if (GetOwningArena() == from.GetOwningArena()) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Transform& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Transform* internal_default_instance()
    {
        return reinterpret_cast<const Transform*>(
            &_Transform_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        5;

    friend void swap(Transform& a, Transform& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Transform* other)
    {
        if (other == this) return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        }
        else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Transform* other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Transform* New() const final
    {
        return new Transform();
    }

    Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<Transform>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Transform& from);
    void MergeFrom(const Transform& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Transform* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "carla.Transform";
    }
protected:
    explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kLocationFieldNumber = 1,
        kRotationFieldNumber = 2,
    };
    // .carla.Vector location = 1;
    bool has_location() const;
private:
    bool _internal_has_location() const;
public:
    void clear_location();
    const ::carla::Vector& location() const;
    PROTOBUF_FUTURE_MUST_USE_RESULT ::carla::Vector* release_location();
    ::carla::Vector* mutable_location();
    void set_allocated_location(::carla::Vector* location);
private:
    const ::carla::Vector& _internal_location() const;
    ::carla::Vector* _internal_mutable_location();
public:
    void unsafe_arena_set_allocated_location(
        ::carla::Vector* location);
    ::carla::Vector* unsafe_arena_release_location();

    // .carla.Rotation rotation = 2;
    bool has_rotation() const;
private:
    bool _internal_has_rotation() const;
public:
    void clear_rotation();
    const ::carla::Rotation& rotation() const;
    PROTOBUF_FUTURE_MUST_USE_RESULT ::carla::Rotation* release_rotation();
    ::carla::Rotation* mutable_rotation();
    void set_allocated_rotation(::carla::Rotation* rotation);
private:
    const ::carla::Rotation& _internal_rotation() const;
    ::carla::Rotation* _internal_mutable_rotation();
public:
    void unsafe_arena_set_allocated_rotation(
        ::carla::Rotation* rotation);
    ::carla::Rotation* unsafe_arena_release_rotation();

    // @@protoc_insertion_point(class_scope:carla.Transform)
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::carla::Vector* location_;
    ::carla::Rotation* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_carla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActorIds

// repeated int32 actorId = 1;
inline int ActorIds::_internal_actorid_size() const
{
    return actorid_.size();
}
inline int ActorIds::actorid_size() const
{
    return _internal_actorid_size();
}
inline void ActorIds::clear_actorid()
{
    actorid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActorIds::_internal_actorid(int index) const
{
    return actorid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActorIds::actorid(int index) const
{
    // @@protoc_insertion_point(field_get:carla.ActorIds.actorId)
    return _internal_actorid(index);
}
inline void ActorIds::set_actorid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value)
{
    actorid_.Set(index, value);
    // @@protoc_insertion_point(field_set:carla.ActorIds.actorId)
}
inline void ActorIds::_internal_add_actorid(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    actorid_.Add(value);
}
inline void ActorIds::add_actorid(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    _internal_add_actorid(value);
    // @@protoc_insertion_point(field_add:carla.ActorIds.actorId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>&
ActorIds::_internal_actorid() const
{
    return actorid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>&
ActorIds::actorid() const
{
    // @@protoc_insertion_point(field_list:carla.ActorIds.actorId)
    return _internal_actorid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>*
ActorIds::_internal_mutable_actorid()
{
    return &actorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32>*
ActorIds::mutable_actorid()
{
    // @@protoc_insertion_point(field_mutable_list:carla.ActorIds.actorId)
    return _internal_mutable_actorid();
}

// -------------------------------------------------------------------

// Number

// int32 num = 1;
inline void Number::clear_num()
{
    num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Number::_internal_num() const
{
    return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Number::num() const
{
    // @@protoc_insertion_point(field_get:carla.Number.num)
    return _internal_num();
}
inline void Number::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value)
{

    num_ = value;
}
inline void Number::set_num(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    _internal_set_num(value);
    // @@protoc_insertion_point(field_set:carla.Number.num)
}

// -------------------------------------------------------------------

// Vehicle

// int32 id = 1;
inline void Vehicle::clear_id()
{
    id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::_internal_id() const
{
    return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::id() const
{
    // @@protoc_insertion_point(field_get:carla.Vehicle.id)
    return _internal_id();
}
inline void Vehicle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value)
{

    id_ = value;
}
inline void Vehicle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    _internal_set_id(value);
    // @@protoc_insertion_point(field_set:carla.Vehicle.id)
}

// .carla.Vector speed = 2;
inline bool Vehicle::_internal_has_speed() const
{
    return this != internal_default_instance() && speed_ != nullptr;
}
inline bool Vehicle::has_speed() const
{
    return _internal_has_speed();
}
inline void Vehicle::clear_speed()
{
    if (GetArenaForAllocation() == nullptr && speed_ != nullptr) {
        delete speed_;
    }
    speed_ = nullptr;
}
inline const ::carla::Vector& Vehicle::_internal_speed() const
{
    const ::carla::Vector* p = speed_;
    return p != nullptr ? *p : reinterpret_cast<const ::carla::Vector&>(
        ::carla::_Vector_default_instance_);
}
inline const ::carla::Vector& Vehicle::speed() const
{
    // @@protoc_insertion_point(field_get:carla.Vehicle.speed)
    return _internal_speed();
}
inline void Vehicle::unsafe_arena_set_allocated_speed(
    ::carla::Vector* speed)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_);
    }
    speed_ = speed;
    if (speed) {

    }
    else {

    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.Vehicle.speed)
}
inline ::carla::Vector* Vehicle::release_speed()
{

    ::carla::Vector* temp = speed_;
    speed_ = nullptr;
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::carla::Vector* Vehicle::unsafe_arena_release_speed()
{
    // @@protoc_insertion_point(field_release:carla.Vehicle.speed)

    ::carla::Vector* temp = speed_;
    speed_ = nullptr;
    return temp;
}
inline ::carla::Vector* Vehicle::_internal_mutable_speed()
{

    if (speed_ == nullptr) {
        auto* p = CreateMaybeMessage<::carla::Vector>(GetArenaForAllocation());
        speed_ = p;
    }
    return speed_;
}
inline ::carla::Vector* Vehicle::mutable_speed()
{
    // @@protoc_insertion_point(field_mutable:carla.Vehicle.speed)
    return _internal_mutable_speed();
}
inline void Vehicle::set_allocated_speed(::carla::Vector* speed)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete speed_;
    }
    if (speed) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::carla::Vector>::GetOwningArena(speed);
        if (message_arena != submessage_arena) {
            speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, speed, submessage_arena);
        }

    }
    else {

    }
    speed_ = speed;
    // @@protoc_insertion_point(field_set_allocated:carla.Vehicle.speed)
}

// .carla.Vector acceleration = 3;
inline bool Vehicle::_internal_has_acceleration() const
{
    return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool Vehicle::has_acceleration() const
{
    return _internal_has_acceleration();
}
inline void Vehicle::clear_acceleration()
{
    if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
        delete acceleration_;
    }
    acceleration_ = nullptr;
}
inline const ::carla::Vector& Vehicle::_internal_acceleration() const
{
    const ::carla::Vector* p = acceleration_;
    return p != nullptr ? *p : reinterpret_cast<const ::carla::Vector&>(
        ::carla::_Vector_default_instance_);
}
inline const ::carla::Vector& Vehicle::acceleration() const
{
    // @@protoc_insertion_point(field_get:carla.Vehicle.acceleration)
    return _internal_acceleration();
}
inline void Vehicle::unsafe_arena_set_allocated_acceleration(
    ::carla::Vector* acceleration)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
    }
    acceleration_ = acceleration;
    if (acceleration) {

    }
    else {

    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.Vehicle.acceleration)
}
inline ::carla::Vector* Vehicle::release_acceleration()
{

    ::carla::Vector* temp = acceleration_;
    acceleration_ = nullptr;
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::carla::Vector* Vehicle::unsafe_arena_release_acceleration()
{
    // @@protoc_insertion_point(field_release:carla.Vehicle.acceleration)

    ::carla::Vector* temp = acceleration_;
    acceleration_ = nullptr;
    return temp;
}
inline ::carla::Vector* Vehicle::_internal_mutable_acceleration()
{

    if (acceleration_ == nullptr) {
        auto* p = CreateMaybeMessage<::carla::Vector>(GetArenaForAllocation());
        acceleration_ = p;
    }
    return acceleration_;
}
inline ::carla::Vector* Vehicle::mutable_acceleration()
{
    // @@protoc_insertion_point(field_mutable:carla.Vehicle.acceleration)
    return _internal_mutable_acceleration();
}
inline void Vehicle::set_allocated_acceleration(::carla::Vector* acceleration)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete acceleration_;
    }
    if (acceleration) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::carla::Vector>::GetOwningArena(acceleration);
        if (message_arena != submessage_arena) {
            acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, acceleration, submessage_arena);
        }

    }
    else {

    }
    acceleration_ = acceleration;
    // @@protoc_insertion_point(field_set_allocated:carla.Vehicle.acceleration)
}

// .carla.Vector location = 4;
inline bool Vehicle::_internal_has_location() const
{
    return this != internal_default_instance() && location_ != nullptr;
}
inline bool Vehicle::has_location() const
{
    return _internal_has_location();
}
inline void Vehicle::clear_location()
{
    if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
        delete location_;
    }
    location_ = nullptr;
}
inline const ::carla::Vector& Vehicle::_internal_location() const
{
    const ::carla::Vector* p = location_;
    return p != nullptr ? *p : reinterpret_cast<const ::carla::Vector&>(
        ::carla::_Vector_default_instance_);
}
inline const ::carla::Vector& Vehicle::location() const
{
    // @@protoc_insertion_point(field_get:carla.Vehicle.location)
    return _internal_location();
}
inline void Vehicle::unsafe_arena_set_allocated_location(
    ::carla::Vector* location)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
    }
    location_ = location;
    if (location) {

    }
    else {

    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.Vehicle.location)
}
inline ::carla::Vector* Vehicle::release_location()
{

    ::carla::Vector* temp = location_;
    location_ = nullptr;
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::carla::Vector* Vehicle::unsafe_arena_release_location()
{
    // @@protoc_insertion_point(field_release:carla.Vehicle.location)

    ::carla::Vector* temp = location_;
    location_ = nullptr;
    return temp;
}
inline ::carla::Vector* Vehicle::_internal_mutable_location()
{

    if (location_ == nullptr) {
        auto* p = CreateMaybeMessage<::carla::Vector>(GetArenaForAllocation());
        location_ = p;
    }
    return location_;
}
inline ::carla::Vector* Vehicle::mutable_location()
{
    // @@protoc_insertion_point(field_mutable:carla.Vehicle.location)
    return _internal_mutable_location();
}
inline void Vehicle::set_allocated_location(::carla::Vector* location)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete location_;
    }
    if (location) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::carla::Vector>::GetOwningArena(location);
        if (message_arena != submessage_arena) {
            location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, location, submessage_arena);
        }

    }
    else {

    }
    location_ = location;
    // @@protoc_insertion_point(field_set_allocated:carla.Vehicle.location)
}

// -------------------------------------------------------------------

// Vector

// double x = 1;
inline void Vector::clear_x()
{
    x_ = 0;
}
inline double Vector::_internal_x() const
{
    return x_;
}
inline double Vector::x() const
{
    // @@protoc_insertion_point(field_get:carla.Vector.x)
    return _internal_x();
}
inline void Vector::_internal_set_x(double value)
{

    x_ = value;
}
inline void Vector::set_x(double value)
{
    _internal_set_x(value);
    // @@protoc_insertion_point(field_set:carla.Vector.x)
}

// double y = 2;
inline void Vector::clear_y()
{
    y_ = 0;
}
inline double Vector::_internal_y() const
{
    return y_;
}
inline double Vector::y() const
{
    // @@protoc_insertion_point(field_get:carla.Vector.y)
    return _internal_y();
}
inline void Vector::_internal_set_y(double value)
{

    y_ = value;
}
inline void Vector::set_y(double value)
{
    _internal_set_y(value);
    // @@protoc_insertion_point(field_set:carla.Vector.y)
}

// double z = 3;
inline void Vector::clear_z()
{
    z_ = 0;
}
inline double Vector::_internal_z() const
{
    return z_;
}
inline double Vector::z() const
{
    // @@protoc_insertion_point(field_get:carla.Vector.z)
    return _internal_z();
}
inline void Vector::_internal_set_z(double value)
{

    z_ = value;
}
inline void Vector::set_z(double value)
{
    _internal_set_z(value);
    // @@protoc_insertion_point(field_set:carla.Vector.z)
}

// -------------------------------------------------------------------

// Rotation

// double pitch = 1;
inline void Rotation::clear_pitch()
{
    pitch_ = 0;
}
inline double Rotation::_internal_pitch() const
{
    return pitch_;
}
inline double Rotation::pitch() const
{
    // @@protoc_insertion_point(field_get:carla.Rotation.pitch)
    return _internal_pitch();
}
inline void Rotation::_internal_set_pitch(double value)
{

    pitch_ = value;
}
inline void Rotation::set_pitch(double value)
{
    _internal_set_pitch(value);
    // @@protoc_insertion_point(field_set:carla.Rotation.pitch)
}

// double yaw = 2;
inline void Rotation::clear_yaw()
{
    yaw_ = 0;
}
inline double Rotation::_internal_yaw() const
{
    return yaw_;
}
inline double Rotation::yaw() const
{
    // @@protoc_insertion_point(field_get:carla.Rotation.yaw)
    return _internal_yaw();
}
inline void Rotation::_internal_set_yaw(double value)
{

    yaw_ = value;
}
inline void Rotation::set_yaw(double value)
{
    _internal_set_yaw(value);
    // @@protoc_insertion_point(field_set:carla.Rotation.yaw)
}

// double roll = 3;
inline void Rotation::clear_roll()
{
    roll_ = 0;
}
inline double Rotation::_internal_roll() const
{
    return roll_;
}
inline double Rotation::roll() const
{
    // @@protoc_insertion_point(field_get:carla.Rotation.roll)
    return _internal_roll();
}
inline void Rotation::_internal_set_roll(double value)
{

    roll_ = value;
}
inline void Rotation::set_roll(double value)
{
    _internal_set_roll(value);
    // @@protoc_insertion_point(field_set:carla.Rotation.roll)
}

// -------------------------------------------------------------------

// Transform

// .carla.Vector location = 1;
inline bool Transform::_internal_has_location() const
{
    return this != internal_default_instance() && location_ != nullptr;
}
inline bool Transform::has_location() const
{
    return _internal_has_location();
}
inline void Transform::clear_location()
{
    if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
        delete location_;
    }
    location_ = nullptr;
}
inline const ::carla::Vector& Transform::_internal_location() const
{
    const ::carla::Vector* p = location_;
    return p != nullptr ? *p : reinterpret_cast<const ::carla::Vector&>(
        ::carla::_Vector_default_instance_);
}
inline const ::carla::Vector& Transform::location() const
{
    // @@protoc_insertion_point(field_get:carla.Transform.location)
    return _internal_location();
}
inline void Transform::unsafe_arena_set_allocated_location(
    ::carla::Vector* location)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
    }
    location_ = location;
    if (location) {

    }
    else {

    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.Transform.location)
}
inline ::carla::Vector* Transform::release_location()
{

    ::carla::Vector* temp = location_;
    location_ = nullptr;
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::carla::Vector* Transform::unsafe_arena_release_location()
{
    // @@protoc_insertion_point(field_release:carla.Transform.location)

    ::carla::Vector* temp = location_;
    location_ = nullptr;
    return temp;
}
inline ::carla::Vector* Transform::_internal_mutable_location()
{

    if (location_ == nullptr) {
        auto* p = CreateMaybeMessage<::carla::Vector>(GetArenaForAllocation());
        location_ = p;
    }
    return location_;
}
inline ::carla::Vector* Transform::mutable_location()
{
    // @@protoc_insertion_point(field_mutable:carla.Transform.location)
    return _internal_mutable_location();
}
inline void Transform::set_allocated_location(::carla::Vector* location)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete location_;
    }
    if (location) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::carla::Vector>::GetOwningArena(location);
        if (message_arena != submessage_arena) {
            location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, location, submessage_arena);
        }

    }
    else {

    }
    location_ = location;
    // @@protoc_insertion_point(field_set_allocated:carla.Transform.location)
}

// .carla.Rotation rotation = 2;
inline bool Transform::_internal_has_rotation() const
{
    return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const
{
    return _internal_has_rotation();
}
inline void Transform::clear_rotation()
{
    if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
        delete rotation_;
    }
    rotation_ = nullptr;
}
inline const ::carla::Rotation& Transform::_internal_rotation() const
{
    const ::carla::Rotation* p = rotation_;
    return p != nullptr ? *p : reinterpret_cast<const ::carla::Rotation&>(
        ::carla::_Rotation_default_instance_);
}
inline const ::carla::Rotation& Transform::rotation() const
{
    // @@protoc_insertion_point(field_get:carla.Transform.rotation)
    return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::carla::Rotation* rotation)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
    }
    rotation_ = rotation;
    if (rotation) {

    }
    else {

    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla.Transform.rotation)
}
inline ::carla::Rotation* Transform::release_rotation()
{

    ::carla::Rotation* temp = rotation_;
    rotation_ = nullptr;
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::carla::Rotation* Transform::unsafe_arena_release_rotation()
{
    // @@protoc_insertion_point(field_release:carla.Transform.rotation)

    ::carla::Rotation* temp = rotation_;
    rotation_ = nullptr;
    return temp;
}
inline ::carla::Rotation* Transform::_internal_mutable_rotation()
{

    if (rotation_ == nullptr) {
        auto* p = CreateMaybeMessage<::carla::Rotation>(GetArenaForAllocation());
        rotation_ = p;
    }
    return rotation_;
}
inline ::carla::Rotation* Transform::mutable_rotation()
{
    // @@protoc_insertion_point(field_mutable:carla.Transform.rotation)
    return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::carla::Rotation* rotation)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete rotation_;
    }
    if (rotation) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::carla::Rotation>::GetOwningArena(rotation);
        if (message_arena != submessage_arena) {
            rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, rotation, submessage_arena);
        }

    }
    else {

    }
    rotation_ = rotation;
    // @@protoc_insertion_point(field_set_allocated:carla.Transform.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace carla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_carla_2eproto
