// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla.proto

#include "carla.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace carla {
constexpr ActorIds::ActorIds(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : actorid_()
    , _actorid_cached_byte_size_(){}
struct ActorIdsDefaultTypeInternal {
    constexpr ActorIdsDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~ActorIdsDefaultTypeInternal() {}
    union {
        ActorIds _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorIdsDefaultTypeInternal _ActorIds_default_instance_;
constexpr Number::Number(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : num_(0){}
struct NumberDefaultTypeInternal {
    constexpr NumberDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~NumberDefaultTypeInternal() {}
    union {
        Number _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberDefaultTypeInternal _Number_default_instance_;
constexpr Vehicle::Vehicle(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : speed_(nullptr)
    , acceleration_(nullptr)
    , location_(nullptr)
    , id_(0){}
struct VehicleDefaultTypeInternal {
    constexpr VehicleDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~VehicleDefaultTypeInternal() {}
    union {
        Vehicle _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleDefaultTypeInternal _Vehicle_default_instance_;
constexpr Vector::Vector(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : x_(0)
    , y_(0)
    , z_(0){}
struct VectorDefaultTypeInternal {
    constexpr VectorDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~VectorDefaultTypeInternal() {}
    union {
        Vector _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr Rotation::Rotation(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : pitch_(0)
    , yaw_(0)
    , roll_(0){}
struct RotationDefaultTypeInternal {
    constexpr RotationDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~RotationDefaultTypeInternal() {}
    union {
        Rotation _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RotationDefaultTypeInternal _Rotation_default_instance_;
constexpr Transform::Transform(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : location_(nullptr)
    , rotation_(nullptr){}
struct TransformDefaultTypeInternal {
    constexpr TransformDefaultTypeInternal()
        : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
    ~TransformDefaultTypeInternal() {}
    union {
        Transform _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace carla
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_carla_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_carla_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_carla_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_carla_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
{
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::ActorIds, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::ActorIds, actorid_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Number, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::Number, num_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, id_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, speed_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, acceleration_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, location_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Vector, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::Vector, x_),
    PROTOBUF_FIELD_OFFSET(::carla::Vector, y_),
    PROTOBUF_FIELD_OFFSET(::carla::Vector, z_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, pitch_),
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, yaw_),
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, roll_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Transform, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::carla::Transform, location_),
    PROTOBUF_FIELD_OFFSET(::carla::Transform, rotation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
{
    { 0, -1, sizeof(::carla::ActorIds)},
    { 6, -1, sizeof(::carla::Number)},
    { 12, -1, sizeof(::carla::Vehicle)},
    { 21, -1, sizeof(::carla::Vector)},
    { 29, -1, sizeof(::carla::Rotation)},
    { 37, -1, sizeof(::carla::Transform)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_ActorIds_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_Number_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_Vehicle_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_Vector_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_Rotation_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carla::_Transform_default_instance_),
};

const char descriptor_table_protodef_carla_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\013carla.proto\022\005carla\032\033google/protobuf/em"
    "pty.proto\"\033\n\010ActorIds\022\017\n\007actorId\030\001 \003(\005\"\025"
    "\n\006Number\022\013\n\003num\030\001 \001(\005\"y\n\007Vehicle\022\n\n\002id\030\001"
    " \001(\005\022\034\n\005speed\030\002 \001(\0132\r.carla.Vector\022#\n\014ac"
    "celeration\030\003 \001(\0132\r.carla.Vector\022\037\n\010locat"
    "ion\030\004 \001(\0132\r.carla.Vector\")\n\006Vector\022\t\n\001x\030"
    "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"4\n\010Rotation\022"
    "\r\n\005pitch\030\001 \001(\001\022\013\n\003yaw\030\002 \001(\001\022\014\n\004roll\030\003 \001("
    "\001\"O\n\tTransform\022\037\n\010location\030\001 \001(\0132\r.carla"
    ".Vector\022!\n\010rotation\030\002 \001(\0132\017.carla.Rotati"
    "on2\365\002\n\014CarlaAdapter\022D\n\022ExecuteOneTimeSte"
    "p\022\026.google.protobuf.Empty\032\026.google.proto"
    "buf.Empty\0228\n\006Finish\022\026.google.protobuf.Em"
    "pty\032\026.google.protobuf.Empty\022>\n\023GetManage"
    "dActorsIds\022\026.google.protobuf.Empty\032\017.car"
    "la.ActorIds\0224\n\023GetManagedActorById\022\r.car"
    "la.Number\032\016.carla.Vehicle\022.\n\rInsertVehic"
    "le\022\016.carla.Vehicle\032\r.carla.Number\022\?\n\023Get"
    "RandomSpawnPoint\022\026.google.protobuf.Empty"
    "\032\020.carla.Transformb\006proto3"
;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const descriptor_table_carla_2eproto_deps[1] = {
    &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_carla_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carla_2eproto = {
    false, false, 786, descriptor_table_protodef_carla_2eproto, "carla.proto",
    &descriptor_table_carla_2eproto_once, descriptor_table_carla_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_carla_2eproto::offsets,
    file_level_metadata_carla_2eproto, file_level_enum_descriptors_carla_2eproto, file_level_service_descriptors_carla_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_carla_2eproto_getter()
{
    return &descriptor_table_carla_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_carla_2eproto(&descriptor_table_carla_2eproto);
namespace carla {

// ===================================================================

class ActorIds::_Internal {
public:
};

ActorIds::ActorIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
    , actorid_(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.ActorIds)
}
ActorIds::ActorIds(const ActorIds& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
    , actorid_(from.actorid_)
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:carla.ActorIds)
}

void ActorIds::SharedCtor()
{
}

ActorIds::~ActorIds()
{
    // @@protoc_insertion_point(destructor:carla.ActorIds)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActorIds::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActorIds::ArenaDtor(void* object)
{
    ActorIds* _this = reinterpret_cast<ActorIds*>(object);
    (void)_this;
}
void ActorIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void ActorIds::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void ActorIds::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.ActorIds)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    actorid_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // repeated int32 actorId = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_actorid(), ptr, ctx);
                CHK_(ptr);
            }
            else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
                _internal_add_actorid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.ActorIds)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // repeated int32 actorId = 1;
    {
        int byte_size = _actorid_cached_byte_size_.load(std::memory_order_relaxed);
        if (byte_size > 0) {
            target = stream->WriteInt32Packed(
                1, _internal_actorid(), byte_size, target);
        }
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.ActorIds)
    return target;
}

size_t ActorIds::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.ActorIds)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated int32 actorId = 1;
    {
        size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            Int32Size(this->actorid_);
        if (data_size > 0) {
            total_size += 1 +
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
        }
        int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
        _actorid_cached_byte_size_.store(cached_size,
            std::memory_order_relaxed);
        total_size += data_size;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ActorIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.ActorIds)
    GOOGLE_DCHECK_NE(&from, this);
    const ActorIds* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorIds>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.ActorIds)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.ActorIds)
        MergeFrom(*source);
    }
}

void ActorIds::MergeFrom(const ActorIds& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.ActorIds)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    actorid_.MergeFrom(from.actorid_);
}

void ActorIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.ActorIds)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ActorIds::CopyFrom(const ActorIds& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.ActorIds)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ActorIds::IsInitialized() const
{
    return true;
}

void ActorIds::InternalSwap(ActorIds* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    actorid_.InternalSwap(&other->actorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorIds::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[0]);
}

// ===================================================================

class Number::_Internal {
public:
};

Number::Number(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.Number)
}
Number::Number(const Number& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    num_ = from.num_;
    // @@protoc_insertion_point(copy_constructor:carla.Number)
}

void Number::SharedCtor()
{
    num_ = 0;
}

Number::~Number()
{
    // @@protoc_insertion_point(destructor:carla.Number)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Number::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Number::ArenaDtor(void* object)
{
    Number* _this = reinterpret_cast<Number*>(object);
    (void)_this;
}
void Number::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void Number::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void Number::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.Number)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    num_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Number::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // int32 num = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Number::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.Number)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 num = 1;
    if (this->num() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.Number)
    return target;
}

size_t Number::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.Number)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 num = 1;
    if (this->num() != 0) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            this->_internal_num());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Number::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.Number)
    GOOGLE_DCHECK_NE(&from, this);
    const Number* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Number>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.Number)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.Number)
        MergeFrom(*source);
    }
}

void Number::MergeFrom(const Number& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.Number)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.num() != 0) {
        _internal_set_num(from._internal_num());
    }
}

void Number::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.Number)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Number::CopyFrom(const Number& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.Number)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Number::IsInitialized() const
{
    return true;
}

void Number::InternalSwap(Number* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Number::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[1]);
}

// ===================================================================

class Vehicle::_Internal {
public:
    static const ::carla::Vector& speed(const Vehicle* msg);
    static const ::carla::Vector& acceleration(const Vehicle* msg);
    static const ::carla::Vector& location(const Vehicle* msg);
};

const ::carla::Vector&
Vehicle::_Internal::speed(const Vehicle* msg)
{
    return *msg->speed_;
}
const ::carla::Vector&
Vehicle::_Internal::acceleration(const Vehicle* msg)
{
    return *msg->acceleration_;
}
const ::carla::Vector&
Vehicle::_Internal::location(const Vehicle* msg)
{
    return *msg->location_;
}
Vehicle::Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_speed()) {
        speed_ = new ::carla::Vector(*from.speed_);
    }
    else {
        speed_ = nullptr;
    }
    if (from._internal_has_acceleration()) {
        acceleration_ = new ::carla::Vector(*from.acceleration_);
    }
    else {
        acceleration_ = nullptr;
    }
    if (from._internal_has_location()) {
        location_ = new ::carla::Vector(*from.location_);
    }
    else {
        location_ = nullptr;
    }
    id_ = from.id_;
    // @@protoc_insertion_point(copy_constructor:carla.Vehicle)
}

void Vehicle::SharedCtor()
{
    ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
            reinterpret_cast<char*>(&speed_) - reinterpret_cast<char*>(this)),
        0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(id_));
}

Vehicle::~Vehicle()
{
    // @@protoc_insertion_point(destructor:carla.Vehicle)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete speed_;
    if (this != internal_default_instance()) delete acceleration_;
    if (this != internal_default_instance()) delete location_;
}

void Vehicle::ArenaDtor(void* object)
{
    Vehicle* _this = reinterpret_cast<Vehicle*>(object);
    (void)_this;
}
void Vehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void Vehicle::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void Vehicle::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.Vehicle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && speed_ != nullptr) {
        delete speed_;
    }
    speed_ = nullptr;
    if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
        delete acceleration_;
    }
    acceleration_ = nullptr;
    if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
        delete location_;
    }
    location_ = nullptr;
    id_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // int32 id = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        // .carla.Vector speed = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_speed(), ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        // .carla.Vector acceleration = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        // .carla.Vector location = 4;
        case 4:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
                ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.Vehicle)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 id = 1;
    if (this->id() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
    }

    // .carla.Vector speed = 2;
    if (this->has_speed()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
            2, _Internal::speed(this), target, stream);
    }

    // .carla.Vector acceleration = 3;
    if (this->has_acceleration()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
            3, _Internal::acceleration(this), target, stream);
    }

    // .carla.Vector location = 4;
    if (this->has_location()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
            4, _Internal::location(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.Vehicle)
    return target;
}

size_t Vehicle::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.Vehicle)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .carla.Vector speed = 2;
    if (this->has_speed()) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
            *speed_);
    }

    // .carla.Vector acceleration = 3;
    if (this->has_acceleration()) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
            *acceleration_);
    }

    // .carla.Vector location = 4;
    if (this->has_location()) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
            *location_);
    }

    // int32 id = 1;
    if (this->id() != 0) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            this->_internal_id());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Vehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.Vehicle)
    GOOGLE_DCHECK_NE(&from, this);
    const Vehicle* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.Vehicle)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.Vehicle)
        MergeFrom(*source);
    }
}

void Vehicle::MergeFrom(const Vehicle& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.Vehicle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.has_speed()) {
        _internal_mutable_speed()->::carla::Vector::MergeFrom(from._internal_speed());
    }
    if (from.has_acceleration()) {
        _internal_mutable_acceleration()->::carla::Vector::MergeFrom(from._internal_acceleration());
    }
    if (from.has_location()) {
        _internal_mutable_location()->::carla::Vector::MergeFrom(from._internal_location());
    }
    if (from.id() != 0) {
        _internal_set_id(from._internal_id());
    }
}

void Vehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.Vehicle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.Vehicle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Vehicle::IsInitialized() const
{
    return true;
}

void Vehicle::InternalSwap(Vehicle* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Vehicle, id_)
        + sizeof(Vehicle::id_)
        - PROTOBUF_FIELD_OFFSET(Vehicle, speed_)>(
        reinterpret_cast<char*>(&speed_),
        reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[2]);
}

// ===================================================================

class Vector::_Internal {
public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.Vector)
}
Vector::Vector(const Vector& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&x_, &from.x_,
        static_cast<size_t>(reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:carla.Vector)
}

void Vector::SharedCtor()
{
    ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
            reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
        0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector::~Vector()
{
    // @@protoc_insertion_point(destructor:carla.Vector)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::ArenaDtor(void* object)
{
    Vector* _this = reinterpret_cast<Vector*>(object);
    (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void Vector::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void Vector::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.Vector)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&x_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&z_) -
            reinterpret_cast<char*>(&x_)) + sizeof(z_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // double x = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
                x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        // double y = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
                y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        // double z = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
                z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.Vector)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // double x = 1;
    if (!(this->x() <= 0 && this->x() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
    }

    // double y = 2;
    if (!(this->y() <= 0 && this->y() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
    }

    // double z = 3;
    if (!(this->z() <= 0 && this->z() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.Vector)
    return target;
}

size_t Vector::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.Vector)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // double x = 1;
    if (!(this->x() <= 0 && this->x() >= 0)) {
        total_size += 1 + 8;
    }

    // double y = 2;
    if (!(this->y() <= 0 && this->y() >= 0)) {
        total_size += 1 + 8;
    }

    // double z = 3;
    if (!(this->z() <= 0 && this->z() >= 0)) {
        total_size += 1 + 8;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.Vector)
    GOOGLE_DCHECK_NE(&from, this);
    const Vector* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.Vector)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.Vector)
        MergeFrom(*source);
    }
}

void Vector::MergeFrom(const Vector& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.Vector)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (!(from.x() <= 0 && from.x() >= 0)) {
        _internal_set_x(from._internal_x());
    }
    if (!(from.y() <= 0 && from.y() >= 0)) {
        _internal_set_y(from._internal_y());
    }
    if (!(from.z() <= 0 && from.z() >= 0)) {
        _internal_set_z(from._internal_z());
    }
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.Vector)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.Vector)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Vector::IsInitialized() const
{
    return true;
}

void Vector::InternalSwap(Vector* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Vector, z_)
        + sizeof(Vector::z_)
        - PROTOBUF_FIELD_OFFSET(Vector, x_)>(
        reinterpret_cast<char*>(&x_),
        reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[3]);
}

// ===================================================================

class Rotation::_Internal {
public:
};

Rotation::Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.Rotation)
}
Rotation::Rotation(const Rotation& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&pitch_, &from.pitch_,
        static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
    // @@protoc_insertion_point(copy_constructor:carla.Rotation)
}

void Rotation::SharedCtor()
{
    ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
            reinterpret_cast<char*>(&pitch_) - reinterpret_cast<char*>(this)),
        0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
}

Rotation::~Rotation()
{
    // @@protoc_insertion_point(destructor:carla.Rotation)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rotation::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rotation::ArenaDtor(void* object)
{
    Rotation* _this = reinterpret_cast<Rotation*>(object);
    (void)_this;
}
void Rotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void Rotation::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void Rotation::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.Rotation)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&pitch_, 0, static_cast<size_t>(
            reinterpret_cast<char*>(&roll_) -
            reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // double pitch = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
                pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        // double yaw = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
                yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        // double roll = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
                roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                ptr += sizeof(double);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.Rotation)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // double pitch = 1;
    if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pitch(), target);
    }

    // double yaw = 2;
    if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_yaw(), target);
    }

    // double roll = 3;
    if (!(this->roll() <= 0 && this->roll() >= 0)) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.Rotation)
    return target;
}

size_t Rotation::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.Rotation)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // double pitch = 1;
    if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
        total_size += 1 + 8;
    }

    // double yaw = 2;
    if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
        total_size += 1 + 8;
    }

    // double roll = 3;
    if (!(this->roll() <= 0 && this->roll() >= 0)) {
        total_size += 1 + 8;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Rotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.Rotation)
    GOOGLE_DCHECK_NE(&from, this);
    const Rotation* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rotation>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.Rotation)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.Rotation)
        MergeFrom(*source);
    }
}

void Rotation::MergeFrom(const Rotation& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.Rotation)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
        _internal_set_pitch(from._internal_pitch());
    }
    if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
        _internal_set_yaw(from._internal_yaw());
    }
    if (!(from.roll() <= 0 && from.roll() >= 0)) {
        _internal_set_roll(from._internal_roll());
    }
}

void Rotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.Rotation)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Rotation::CopyFrom(const Rotation& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.Rotation)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Rotation::IsInitialized() const
{
    return true;
}

void Rotation::InternalSwap(Rotation* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Rotation, roll_)
        + sizeof(Rotation::roll_)
        - PROTOBUF_FIELD_OFFSET(Rotation, pitch_)>(
        reinterpret_cast<char*>(&pitch_),
        reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotation::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[4]);
}

// ===================================================================

class Transform::_Internal {
public:
    static const ::carla::Vector& location(const Transform* msg);
    static const ::carla::Rotation& rotation(const Transform* msg);
};

const ::carla::Vector&
Transform::_Internal::location(const Transform* msg)
{
    return *msg->location_;
}
const ::carla::Rotation&
Transform::_Internal::rotation(const Transform* msg)
{
    return *msg->rotation_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena)
{
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:carla.Transform)
}
Transform::Transform(const Transform& from)
    : ::PROTOBUF_NAMESPACE_ID::Message()
{
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    if (from._internal_has_location()) {
        location_ = new ::carla::Vector(*from.location_);
    }
    else {
        location_ = nullptr;
    }
    if (from._internal_has_rotation()) {
        rotation_ = new ::carla::Rotation(*from.rotation_);
    }
    else {
        rotation_ = nullptr;
    }
    // @@protoc_insertion_point(copy_constructor:carla.Transform)
}

void Transform::SharedCtor()
{
    ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
            reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
        0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&location_)) + sizeof(rotation_));
}

Transform::~Transform()
{
    // @@protoc_insertion_point(destructor:carla.Transform)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor()
{
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete location_;
    if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object)
{
    Transform* _this = reinterpret_cast<Transform*>(object);
    (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*)
{
}
void Transform::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}

void Transform::Clear()
{
    // @@protoc_insertion_point(message_clear_start:carla.Transform)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
        delete location_;
    }
    location_ = nullptr;
    if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
        delete rotation_;
    }
    rotation_ = nullptr;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx)
{
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        switch (tag >> 3) {
        // .carla.Vector location = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        // .carla.Rotation rotation = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
                CHK_(ptr);
            }
            else goto handle_unusual;
            continue;
        default: {
handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const
{
    // @@protoc_insertion_point(serialize_to_array_start:carla.Transform)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // .carla.Vector location = 1;
    if (this->has_location()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
            1, _Internal::location(this), target, stream);
    }

    // .carla.Rotation rotation = 2;
    if (this->has_rotation()) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(
            2, _Internal::rotation(this), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:carla.Transform)
    return target;
}

size_t Transform::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:carla.Transform)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // .carla.Vector location = 1;
    if (this->has_location()) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
            *location_);
    }

    // .carla.Rotation rotation = 2;
    if (this->has_rotation()) {
        total_size += 1 +
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
            *rotation_);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
            _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:carla.Transform)
    GOOGLE_DCHECK_NE(&from, this);
    const Transform* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
        &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla.Transform)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:carla.Transform)
        MergeFrom(*source);
    }
}

void Transform::MergeFrom(const Transform& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:carla.Transform)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.has_location()) {
        _internal_mutable_location()->::carla::Vector::MergeFrom(from._internal_location());
    }
    if (from.has_rotation()) {
        _internal_mutable_rotation()->::carla::Rotation::MergeFrom(from._internal_rotation());
    }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:carla.Transform)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:carla.Transform)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Transform::IsInitialized() const
{
    return true;
}

void Transform::InternalSwap(Transform* other)
{
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Transform, rotation_)
        + sizeof(Transform::rotation_)
        - PROTOBUF_FIELD_OFFSET(Transform, location_)>(
        reinterpret_cast<char*>(&location_),
        reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const
{
    return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
        file_level_metadata_carla_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace carla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::carla::ActorIds* Arena::CreateMaybeMessage< ::carla::ActorIds>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::ActorIds>(arena);
}
template<> PROTOBUF_NOINLINE ::carla::Number* Arena::CreateMaybeMessage< ::carla::Number>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::Number>(arena);
}
template<> PROTOBUF_NOINLINE ::carla::Vehicle* Arena::CreateMaybeMessage< ::carla::Vehicle>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::Vehicle>(arena);
}
template<> PROTOBUF_NOINLINE ::carla::Vector* Arena::CreateMaybeMessage< ::carla::Vector>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::Vector>(arena);
}
template<> PROTOBUF_NOINLINE ::carla::Rotation* Arena::CreateMaybeMessage< ::carla::Rotation>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::Rotation>(arena);
}
template<> PROTOBUF_NOINLINE ::carla::Transform* Arena::CreateMaybeMessage< ::carla::Transform>(Arena* arena)
{
    return Arena::CreateMessageInternal< ::carla::Transform>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
